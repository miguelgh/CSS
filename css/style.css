body {
color: blue;
}
h1 {
color: brown;
}
#titulo {
    color: rgb(89, 139, 7);
}
p.texto {/*al colocar la p antes de la clase .texto lo que hace es buscar un elemento de clase texto dentro de una etiqueta p y asignarle las propiedades*/
    color: blueviolet;
}
p.especial{
    color: rgb(197, 123, 13);
}
/*esto quiere decir que dentro de todos los div que contengan un p se van a ejecutar las propiedades */
div p {
    color: crimson;
}
div h3{/*cualquier h3 que esté dentro de un div*/
    color: rgb(30, 133, 17);
}
/*con la , se indica que cualquier h3 dentro de un div y tambien cualquier h4 dentro de un div tengan estas propiedades*/
div h3, div h4 {
    color: black;
}

* {/*con * se indica que seleccione todos los elementos de html y le aplique las siguientes propiedades*/
    font-family:'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
    color: rgb(0, 0, 0);
}
/* el * además aplica las propiedades solo si los elementos no han sido definido por otros selectores, no importa si este selector se coloque al final, solo se va a aplicar las propiedades si el elemento no ha sido definido anteriormente*/
/*por eso aplica la propiedad font a todos los elementos, pero no la propiedad color que ya ha sido definido anteriormente*/
.color {
   /* border: 5px rgb(255, 0, 0) dotted*/
   border-style: solid;
   border-color: blue;
   border-radius: 10px;
   /*redondea las esquinas del borde*/
   border-width: 5px;
   /*engrosa el borde*/
}
#fondo {
    background-color: rgba(255, 0, 0, 0.3);
    /*rgba permite trabajar con el canal alfa, el cuarto número va de 0 a 1 con decimales intermedios para regular su valor. 0 es transparencia total y 1 es un sólido*/
    opacity: 0.7;
    /*opacity vuelve transparente todo el objeto, ya sea texto o fondo, va de 0 a 1*/
    background-image: url('../img/vinilo01.png');
    background-size: cover;
    /*
    auto: completa automaticamente el fondo
    cover: utiliza el 100% proporcional del fondo para dimensionar el tamaño de la imagen, este también se adapta al ancho del contenedor.
    contain: contiene la imagen dentro de las dimensiones del elemento, sería en el alto como base
    */
    background-size: 100px 100px;
    /*el primer valor es el ancho, el segundo el alto*/
    background-repeat: repeat-y;
    /*repite la imagen solo en horizontal (x), con y en vertical*/
    background-position: right top;
    /*define la posición del fondo, right, left, top y bottom, también se le pueden definir valores numéricos. */
}
.margen p{
    color: bisque;
    font-size: 22px;
}
.margen {
    background-color: chocolate;
    margin: 10px 15px 20px 30px;
    /* se agrega espacio por fuera del elemento
    1)superior 2)derecho 3)inferior, 4)izquierdo
    si son 2 atributos, sería 1)superior e inferior, 2) derecha e izquierda
    */
    padding: 10px 20px 30px 35px;
    /*agrega espacio internamente en el objeto*/
    border: solid 4px rgb(30, 133, 17);
    width: 50px;
    overflow:hidden;
    /*overflow hidden oculta el contenido que se salga del espacio establecido de la caja
    overflow sroll muestra unas barras para navegar el contenido que está dentro de ellas
    */
    outline: solid 2px red;
    /*es una linea que va despues del borde y antes del margen*/
}
.letras{
    font-family: Verdana, Geneva, Tahoma, sans-serif;
    color: black;
    text-align: justify;
    /*centra el texto en relación al contenedor*/
    text-decoration: overline dotted;
    /*subrayados del texto*/
    text-shadow: 5px 5px 5px rgb(247, 67, 67);
    /*text-shadow: toma como 
    primer parámetro el movimiento horizontal hacia la derecha, 
    el segundo es hacia abajo, 
    tercer valor es el blur*/
}
.tipografias p, .tipografias a {
    color: black;
    font-family: 'Oswald', sans-serif;
    /*tipografía cargada desde google fonts.
    el link de carga se encuentra en el head del index
    */
}
a {
    color: black;
}

/*el orden de las propeidades de a es importante*/
a:link { 
    color: black;
}
/*con link quiere decir que el link no ha sido visitado*/
a:visited {
    color: brown;
}
/*visited se ejecuta cuando el link fue visitado*/
a:hover {
    color: chartreuse;
}
/*con hover se cambia la propiedad cuando el puntero está sobre el objeto a*/

a:active {
    color: red;
}
/*se ejecuta cuando está presionado*/
ul {
    color: black;
    background-color: coral;
    list-style-type: none;
    /*al colocar none se eliminan los marcadores de las listas pero no se elimina el padding que se crea, para eso hay que crear un padding que resetee esos valores*/
    padding-left: 0px;
}
table {
    width: 100%;
    border-collapse: collapse;
    /*con border collapse, se elimina la separación entre bloques que se crea en la tabla, es como un amrgen entre celda y celda*/
}
th,td {
    border: solid 1px rgb(0, 79, 143);
    padding: 10px;
}
th {
    background-color: chartreuse;
    color: rgb(0, 0, 85);
    text-align: left;
}
tr:nth-child(odd) {
    /*permite seleccionar cierto tipo de bloque, en este caso puede ser even(impar) o odd (par)*/
    background-color: rgb(170, 255, 234);
}
/*es importante el orden porque si no el hover no funcionaría en las listas pares por odd*/
tr:hover {
    background-color: rgb(114, 206, 126);
    cursor:pointer;
    /*modifica el puntero del mouse por la mano*/
}
.PruebaSpan {
    background-color: darkgreen;
    display: block;
    /*con display block el objeto utiliza el 100% del ancho de la pantalla por defecto*/
    display: inline;
    /*display inline, los elementos utilizan es espacio que ocupa su contenido*/
    /*display: none , hace desaparecer el objeto*/
    visibility: hidden;
    /*visibility: hidden lo que hace es ocultar el objeto, a diferencia de display none que lo desaparece, el hidden sigue ocupando el espacio, es como darle una transparencia*/
    visibility: visible;
    display: block;
    max-width: 600px;
}
#posicion {
    background-color: darkorchid;
    position:relative;
    /*static es por defecto que vienen los elementos de html*/
    /*con relative el objeto se superpone a otros elementos*/
    left: 20px;
    /*left indica cuanto se tiene que mover la posición del objeto seleccionado*/
    top: 10px;
}
.extra1 {
    background-color: burlywood;
}
#posicion2 {
    background-color: rgb(50, 204, 96);
    position:fixed;
    /*fixed ubica el elemento con relación al navegador, en este caso se iría arriba de todo a 10px del top del navegador y 20px left, subiendo una capa y superponiendose a otros elementos, si se hace scroll, el objeto va a seguir anclado al navegador y se va a mover con el*/
    left: 20px;
    /*left indica cuanto se tiene que mover la posición del objeto seleccionado*/
    top: 10px;
}
#posicion3 {
    background-color: rgb(204, 201, 50);
    position:absolute;
    /*absolute ubica el elemento con relación al navegador pero no sigue al scroll, solo lo posiciona al comienzo del navegador y si se hace scroll va a quedar ahí*/
    left: 20px;
    /*left indica cuanto se tiene que mover la posición del objeto seleccionado*/
    top: 10px;
}
.left {
    background-color: rgb(182, 204, 60);
    float: left;
    width: 100px;
}
.right {
    background-color: darkorange;
    float: right;
}
.contenedor {
    width: 100%;
    height: 130px;

}
.inlineBlock {
    background-color: dimgray;
    display: inline-block;
    /*display inline-block permite agregar la propiedad de width y height, a diferencia de solo inline que no lo permite, esto se utiliza mucho para los menu de navegación horizontal*/
    width: 200px;
    height: 30px;
}
.centrado {
    background-color: darkkhaki;
    /*Para centrar un objeto, este siempre tiene que tener un width*/
    width: 200px;
    /*en margin 0, para que no se centre vertical y luego automático para el horizontal*/
    margin: 0 auto;
    /*text aling se utiliza para centrar el texto que contiene el objeto*/
    text-align: center;
    /*height: 50px; para centrar el texto en vertical, al objeto no hay que darle una medida en height si no que hay que hacerlo con el padding para que se centre automáticamente en vertical*/
    padding: 50px 0px;
}